{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Popups \u00b6 The Popups plugin provides an extremely lightweight framework for implementing Popup Pages using the Rg.Plugin.Popup package with Prism.Forms . To do this we simply provide you with some new implementations of both Prism's Navigation & Dialog Services. Note Install the Prism.Plugin.Popups NuGet to your project. This has no dependency on a specific DI Container thus allowing your code to work with any container of your choice. Critical Note This plugin does not remove any platform initialization requirements that Rg.Plugins.Popup has. Be sure that you have followed all of the Rg.Plugins.Popup guidelines for initializing each Platform (iOS/Android,etc). Support \u00b6 This project is maintained by Dan Siegel. If this project or others maintained by Dan have helped you please help support the project by sponsoring Dan on GitHub! NuGet \u00b6 Package NuGet MyGet Prism.Plugin.Popups Want to consume the CI packages? Sign up as a GitHub sponsor and you can access the Sponsor Connect private feed.","title":"Home"},{"location":"#popups","text":"The Popups plugin provides an extremely lightweight framework for implementing Popup Pages using the Rg.Plugin.Popup package with Prism.Forms . To do this we simply provide you with some new implementations of both Prism's Navigation & Dialog Services. Note Install the Prism.Plugin.Popups NuGet to your project. This has no dependency on a specific DI Container thus allowing your code to work with any container of your choice. Critical Note This plugin does not remove any platform initialization requirements that Rg.Plugins.Popup has. Be sure that you have followed all of the Rg.Plugins.Popup guidelines for initializing each Platform (iOS/Android,etc).","title":"Popups"},{"location":"#support","text":"This project is maintained by Dan Siegel. If this project or others maintained by Dan have helped you please help support the project by sponsoring Dan on GitHub!","title":"Support"},{"location":"#nuget","text":"Package NuGet MyGet Prism.Plugin.Popups Want to consume the CI packages? Sign up as a GitHub sponsor and you can access the Sponsor Connect private feed.","title":"NuGet"},{"location":"dialogs/","text":"Popup Dialog Service \u00b6 The Dialog Service in Prism is simply fantastic, however it has one major limitation. Because Dialogs are pushed as content within the currently active ContentPage this results in a limitation in which the NavigationPage within a TabbedPage or NavigationPage will remain visible and accessible. Also if called from a MasterDetailPage's Master, it will be update the Detail but may not close the Master resulting in a situation where you can still access menu items within the Master page. The Popup Plugin is perfectly situated to solve this problem by swapping out the implementation for the Dialog Service with one which uses a PopupPage to push. This solves the issues mentioned above because a PopupPage will overlay any Navigation Bar and will display even if a MasterDetailPage's Master is currently presented. protected override void RegisterTypes ( IContainerRegistry containerRegistry ) { containerRegistry . RegisterPopupDialogService (); containerRegistry . RegisterDialog < SampleDialog , SampleDialogViewModel >(); } Note Besides needing to register the Popup Dialog Service there are ZERO differences at this time for using the Dialog Service. Warning Popup Pages from Rg.Plugins.Popup are simply a Xamarin.Forms.ContentPage. If you fail to properly initialize Rg.Plugins.Poup or you fail to register the Popup Plugin, Prism will simply push the Popup Page as if it were a Content Page. This may result in the Popup Page being treated as a Modal page or it may be pushed into a Navigation Page. Be sure to see the Initializing Rg.Plugin.Popup topic for more information.","title":"Dialog Service"},{"location":"dialogs/#popup-dialog-service","text":"The Dialog Service in Prism is simply fantastic, however it has one major limitation. Because Dialogs are pushed as content within the currently active ContentPage this results in a limitation in which the NavigationPage within a TabbedPage or NavigationPage will remain visible and accessible. Also if called from a MasterDetailPage's Master, it will be update the Detail but may not close the Master resulting in a situation where you can still access menu items within the Master page. The Popup Plugin is perfectly situated to solve this problem by swapping out the implementation for the Dialog Service with one which uses a PopupPage to push. This solves the issues mentioned above because a PopupPage will overlay any Navigation Bar and will display even if a MasterDetailPage's Master is currently presented. protected override void RegisterTypes ( IContainerRegistry containerRegistry ) { containerRegistry . RegisterPopupDialogService (); containerRegistry . RegisterDialog < SampleDialog , SampleDialogViewModel >(); } Note Besides needing to register the Popup Dialog Service there are ZERO differences at this time for using the Dialog Service. Warning Popup Pages from Rg.Plugins.Popup are simply a Xamarin.Forms.ContentPage. If you fail to properly initialize Rg.Plugins.Poup or you fail to register the Popup Plugin, Prism will simply push the Popup Page as if it were a Content Page. This may result in the Popup Page being treated as a Modal page or it may be pushed into a Navigation Page. Be sure to see the Initializing Rg.Plugin.Popup topic for more information.","title":"Popup Dialog Service"},{"location":"rgplugins/","text":"Initializing Rg.Plugin.Popup \u00b6 Rg.Plugin.Popup must be initialized on each platform. Critical Note With the exception of the BackButton handler for Android there is NO platform specific code in this Plugin. Any platform specific errors that you may encounter are likely the result of a bug in either Rg.Plugins.Popup or Xamarin.Forms. Android \u00b6 public class MainActivity : FormsAppCompatActivity { protected override void OnCreate ( Bundle savedInstanceState ) { TabLayoutResource = Resource . Layout . Tabbar ; ToolbarResource = Resource . Layout . Toolbar ; base . OnCreate ( savedInstanceState ); global :: Xamarin . Forms . Forms . Init ( this , savedInstanceState ); global :: Rg . Plugins . Popup . Popup . Init ( this ); LoadApplication ( new App ()); } } iOS \u00b6 public partial class AppDelegate : FormsApplicationDelegate { public override bool FinishedLaunching ( UIApplication uiApplication , NSDictionary launchOptions ) { global :: Rg . Plugins . Popup . Popup . Init (); global :: Xamarin . Forms . Forms . Init (); LoadApplication ( new App ()); return base . FinishedLaunching ( uiApplication , launchOptions ); } }","title":"Initializing Rg.Plugin.Popup"},{"location":"rgplugins/#initializing-rgpluginpopup","text":"Rg.Plugin.Popup must be initialized on each platform. Critical Note With the exception of the BackButton handler for Android there is NO platform specific code in this Plugin. Any platform specific errors that you may encounter are likely the result of a bug in either Rg.Plugins.Popup or Xamarin.Forms.","title":"Initializing Rg.Plugin.Popup"},{"location":"rgplugins/#android","text":"public class MainActivity : FormsAppCompatActivity { protected override void OnCreate ( Bundle savedInstanceState ) { TabLayoutResource = Resource . Layout . Tabbar ; ToolbarResource = Resource . Layout . Toolbar ; base . OnCreate ( savedInstanceState ); global :: Xamarin . Forms . Forms . Init ( this , savedInstanceState ); global :: Rg . Plugins . Popup . Popup . Init ( this ); LoadApplication ( new App ()); } }","title":"Android"},{"location":"rgplugins/#ios","text":"public partial class AppDelegate : FormsApplicationDelegate { public override bool FinishedLaunching ( UIApplication uiApplication , NSDictionary launchOptions ) { global :: Rg . Plugins . Popup . Popup . Init (); global :: Xamarin . Forms . Forms . Init (); LoadApplication ( new App ()); return base . FinishedLaunching ( uiApplication , launchOptions ); } }","title":"iOS"},{"location":"navigation/","text":"The original purpose of the Popup Plugin was to provide support for Popup Pages within a Prism Application. This cannot be natively supported since Xamarin.Forms has no concept of a PopupPage, and Rg.Plugins.Popup uses it's own service for push and popping PopupPages. While the original implemenation largely consisted of extension methods, the current version of the Popup Plugin now replaces the NavigationService that is registered by Prism with it's own implementation that understands Popup Pages. Initializing the Popup Plugin \u00b6 Warning Popup Pages from Rg.Plugins.Popup are simply a Xamarin.Forms.ContentPage. If you fail to properly initialize Rg.Plugins.Poup or you fail to register the Popup Plugin, Prism will simply push the Popup Page as if it were a Content Page. This may result in the Popup Page being treated as a Modal page or it may be pushed into a Navigation Page. Be sure to see the Initializing Rg.Plugin.Popup topic for more information. In your Prism Application you will need to be sure to specify that you want to register the Popup Plugin's Navigation Service from your RegisterTypes method. Failure to call this method will result in the Popup Navigation Service not being registered. protected override void RegisterTypes ( IContainerRegistry containerRegistry ) { containerRegistry . RegisterPopupNavigationService (); }","title":"Getting Started"},{"location":"navigation/#initializing-the-popup-plugin","text":"Warning Popup Pages from Rg.Plugins.Popup are simply a Xamarin.Forms.ContentPage. If you fail to properly initialize Rg.Plugins.Poup or you fail to register the Popup Plugin, Prism will simply push the Popup Page as if it were a Content Page. This may result in the Popup Page being treated as a Modal page or it may be pushed into a Navigation Page. Be sure to see the Initializing Rg.Plugin.Popup topic for more information. In your Prism Application you will need to be sure to specify that you want to register the Popup Plugin's Navigation Service from your RegisterTypes method. Failure to call this method will result in the Popup Navigation Service not being registered. protected override void RegisterTypes ( IContainerRegistry containerRegistry ) { containerRegistry . RegisterPopupNavigationService (); }","title":"Initializing the Popup Plugin"},{"location":"navigation/application-lifecycle/","text":"Version 8 of the Popup Plugin has introduced support for Prism's IApplicationLifecycleAware interface on your PopupPage ViewModels. This means that if your app goes to sleep while you have a PopupPage displayed, it's ViewModel can now handle the OnSleep, and similarly the OnResume when the app resumes. Implementation Note Support for IApplicationLifecycleAware traditionally comes from PrismApplicationBase's override of OnResume / OnSleep. Normally if you do not include a reference to the base method IApplicationLifecycleAware would be disabled. Using the PopupPlugin it is important that you do NOT reference the base method call as this will lead to bugs in your app. using Prism.Plugin.Popups; public partial class App : PrismApplication { protected override void OnResume() { this.PopupPluginOnResume(); } protected override void OnSleep() { this.PopupPluginOnSleep(); } }","title":"Application Lifecycle"},{"location":"navigation/backbutton/","text":"Version 8 of the Popup Plugin has introduced new support for handling the Android Back Button. This cannot however be done seamlessly from within Xamarin.Forms. In order to support the Android Back Button you will need to update your MainActivity. Adding support is very simple as you will simply need to override the OnBackPressed method in your MainActivity and call PopupPlugin.OnBackPressed() . Implementation Note Do not include a reference to the base.OnBackPressed using Prism.Plugin.Popups ; public class MainActivity : FormsAppCompatActivity { public override void OnBackPressed () { PopupPlugin . OnBackPressed (); } } Note This should only be used for version 8.0. Prism 8.1 introduced back button support which supports BOTH dialogs and Page navigation. This API will be deprecated when we bump to 8.1 as the Prism.Forms API should be used directly with 8.1.","title":"Android Back Button"}]}